
## Perfect


### BASIC

alias whois='git remote -v'
alias where='pwd'
alias c='clear'
alias ip='ip addr show'
alias iptables='/usr/sbin/iptables'
alias o='xdg-open'
alias e='echo'



## Python
alias py='python3'
alias python='python3'
alias pyhttp='python3 -m http.server 8000'


## FUNC


edit() {
    "${EDITOR:-nano}" "$HOME/.bashrc"
}



copy_pwd() {
    pwd
    pwd | xclip -selection clipboard
    echo "Directory copied to clipboard."
}




### Software

alias ard='/home/cnc/Desktop/soft/bin/arduino-cli'
alias arduino-cli='ard'







######################
### git
######################

alias gc='git clone'

## git alias
function gitremote() {
    local repo="$1"
    git remote set-url origin "git@github.com:Tpj-root/${repo}"
    echo "Switched remote to git@github.com:Tpj-root/${repo}"
}


##########################################
# 1 -- > git clone "URL"
# 2 -- > cd <repo_name>
# 3 -- > git remote set-url origin "git@github.com:Tpj-root/${repo_name}"
# 4 -- > xdg-open .
# 5 -- > gedit README.md

function mygit() {
    if [ -z "$1" ]; then
        echo "Usage: mygit <repository_url>"
        echo "Example: mygit https://github.com/Tpj-root/PCB_Prototype_Board.git"
        return 1
    fi

    local repo_url="$1"
    local repo_name=$(basename "$repo_url" .git)

    # Clone the repository
    git clone "$repo_url" || { echo "Failed to clone $repo_url"; return 1; }

    # Navigate into the repository directory
    cd "$repo_name" || { echo "Failed to cd into $repo_name"; return 1; }

    # Set the remote to SSH
    git remote set-url origin "git@github.com:Tpj-root/${repo_name}"
    echo "Switched remote to git@github.com:Tpj-root/${repo_name}"

    #open the current dir
    xdg-open .

    #open the Readme file
    gedit README.md
}



function gitgo() {
    # Check if the repository has any uncommitted changes
    if git diff-index --quiet HEAD --; then
        echo "No changes to commit. Pushing existing commits."
        git push || { echo "Failed to push changes."; return 1; }
    else
        # Commit and push changes
        echo "Changes detected. Adding, committing, and pushing."
        git add . && git commit -m "just go" && git push || { echo "Failed to complete git operations."; return 1; }
    fi
}



gitgo() {
    if [ -z "$1" ]; then
        # If no argument is provided, use the current date and time as the commit message
        msg=$(date +"%a_%b_%d_%I:%M:%S_%p_%Z_%Y")
    else
        # If an argument is provided, use it as the commit message
        msg="$1"
    fi
    git add . && git commit -m "$msg"
    # this command push to online
    #git add . && git commit -m "$msg" && git push origin main
}
alias gitpushonly='git push origin main'
#
gitpush() {
    git add . && git commit -m "$msg" && git push origin main
}

##########################################














alias gitwho='git remote get-url origin'
alias gitgo='git push origin main'
alias gitkey='ssh-add /home/sab/Desktop/GIT_MAIN/id_rsa'
alias gitgo='git add . && git commit -m "just go" && git push'


##########################




## Temp

gitkey() {
    # Start the SSH agent
    eval "$(ssh-agent -s)"
    
    # Add your SSH key to the agent (replace with the actual path to your key)
    ssh-add ~/Desktop/git/id_rsa
}











source /home/sab/Desktop/TRY_BUILD/linuxcnc-dev/scripts/rip-environment
alias you='/home/sab/Desktop/BUILD/youtube_downloader/YTDownloader_Linux.AppImage'

alias tele='cd /home/sab/Desktop/BUILD/Telegram && ./Telegram'
alias m='mkdir build && cd build && cmake .. && make'
alias lc='linuxcnc'
alias game='cd /home/sab/Documents/1/3.0 && ruby sandbox.rb -c stone'


alias st='/home/sab/Documents/PACK/sublime-text_build-3211_amd64/data/opt/sublime_text/sublime_text'



alias tor='cd /home/sab/Desktop/BUILD/tor/tor-browser-linux-x86_64-13.0.1/tor-browser && ./start-tor-browser.desktop'



alias ins='sudo apt-get install'
alias mvplugin='ls *.so 1> /dev/null 2>&1 && mv *.so /usr/lib/x86_64-linux-gnu/qt5/plugins/designer/'

alias Q='/home/sab/altera/13.0sp1/quartus/bin/quartus --64bit'
alias makepipreq='pip freeze > requirements.txt'

#alias

. "$HOME/.cargo/env"

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
#
#  OpenCASCADE
#
export CASROOT=/usr/local/bin
export LD_LIBRARY_PATH=/usr/local/lib/:$LD_LIBRARY_PATH
# Add Open CASCADE include path
export CPLUS_INCLUDE_PATH=/usr/local/include/opencascade:$CPLUS_INCLUDE_PATH
export LIBRARY_PATH=/usr/local/lib:$LIBRARY_PATH
#
# 
# sudo lshw -short
# get the hardware details
#
# root to user permission
# sudo chown -R $USER:$USER 
#
#


